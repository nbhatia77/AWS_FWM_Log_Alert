---
## Nitin's AB3 Web Stack
##
## Changelog:
##  - Initial release
##
## Dependencies:
## WAF Systems Manager

AWSTemplateFormatVersion: '2010-09-09'
Description: WAF Demo

## Parameters
Parameters:
  EC2InstanceSize:
    Default: "t2.small"
    Description: Instance size for Web Servers.
    Type: String
    AllowedValues:
      - "t2.small"
      - "t2.medium"
      - "t3.small"
      - "t3.medium"
  MyTrustedNetwork:
    Description: Only connections from this network are allowed to your site. Enter an IP or CIDR E.g. 10.10.10.10/32. Get your current IP @ https://ifconfig.co/
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Type: String
    Default: 0.0.0.0/0
  ArtifactsBucket:
    Description: S3 bucket with artifact files (Lambda functions, templates, html files, etc.). Leave default.
    Type: String
    Default: protecting-workloads-nitin-ab
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: ArtifactsBucket S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
  ArtifactsPrefix:
    Description: Path in the S3 bucket containing artifact files. Leave default.
    Type: String
    Default: private
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: ArtifactsPrefix key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-),
      and forward slash (/). Leave default.
  AMIPreviousVersionIndex:
    Description: Number of previous version of AMI to use [0=current AMI through 15]
    Type: Number
    Default: 5
    MinValue: 0
    MaxValue: 15

#  AmazonLinux2AmiId:
#    Type : 'AWS::SSM::Parameter::Value<String>'
#    Description: Latest Amazon Linux 2 AMI ID. Leave default.
#    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

## Metadata
Metadata:

## Friendly UI grouping for parameters
#        - AmazonLinux2AmiId
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
        - EC2InstanceSize
        - MyTrustedNetwork
        - AMIPreviousVersionIndex
      - Label:
          default: Artifact Configuration
        Parameters:
        - ArtifactsBucket
        - ArtifactsPrefix

    ParameterLabels:
      EC2InstanceSize:
        default: EC2 Instance Size
      MyTrustedNetwork:
        default: Trusted Network CIDR
      ArtifactsBucket:
        default: S3 artifact bucket
      ArtifactsPrefix:
        default: S3 artifact path

## Resources
Resources:

## The VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !Sub 10.5.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', vpc]]

## Create an IGW & attach it to the VPC
  vpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Igw]]
  attachIgwVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref vpcIgw

## Create a public subnet in each AZ
  sub1Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.5.1.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSub1]]
  sub2Public:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.5.2.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubSub2]]

## Associate the public subnets with a public route table
  rtbPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PubRoutes]]
  rteToIgw:
    Type: AWS::EC2::Route
    DependsOn: attachIgwVpc
    Properties:
      RouteTableId: !Ref rtbPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcIgw
  srta1Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1Public
      RouteTableId: !Ref rtbPublic
  srta2Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2Public
      RouteTableId: !Ref rtbPublic

## Create a private subnet in each AZ
  sub1Private:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.5.11.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSub1]]
  sub2Private:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub 10.5.12.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', PrvSub2]]

## Create a NAT Gateway & EIP
  natEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  vpcNgw:
    Type: AWS::EC2::NatGateway
    DependsOn: attachIgwVpc
    Properties:
      AllocationId: !GetAtt natEip.AllocationId
      SubnetId: !Ref sub2Public
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Ngw]]

## Associate the private subnets with a natted route table
  rtbNat:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', NgwRoutes]]
  rteToNgw:
    Type: AWS::EC2::Route
    DependsOn: vpcNgw
    Properties:
      RouteTableId: !Ref rtbNat
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcNgw
  srta1Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1Private
      RouteTableId: !Ref rtbNat
  srta2Ngw:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2Private
      RouteTableId: !Ref rtbNat

## Configure ALB: security group, load balancer, route 53 endpoint
  
  sgLoadBalancer1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyTrustedNetwork
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyTrustedNetwork
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', AlbSg]]

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref sgLoadBalancer1
      Subnets: [ !Ref sub1Public, !Ref sub2Public ]
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', Alb]]

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', TargGrp]]

  AlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: [ AlbTargetGroup ]
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

## Configure the ECS ASG, security group, launch configuration, IAM role, load balancer, cloudwatch log group, route53 endpoint
  sgEC2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpc
      GroupDescription: EC2 Instance Security Group
      Tags:
        - Key: Name
          Value: !Join ["-" , [!Ref 'AWS::StackName', EC2Sg]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: 
            !Ref sgLoadBalancer1

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        !GetAtt AMIInfo.Id
      SecurityGroups:
      - !GetAtt sgEC2Sg.GroupId
      InstanceType: !Ref EC2InstanceSize
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          #yum update -y
          curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
          amazon-linux-extras install -y php7.2
          yum install -y nodejs curl git httpd
          ln -s /usr/bin/node /usr/bin/nodejs
          node -v
          npm install -g bower
          /usr/bin/aws configure set region ${AWS::Region}
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets site_config --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

    Metadata:
        AWS::CloudFormation::Init:
          configSets:
            site_config:
            - init_site
          init_site:
            commands:
              01getsite_content:
                cwd: /tmp
                command: "cd /tmp; curl -O https://s3.amazonaws.com/protecting-workloads-workshop/public/artifacts/pww_site.zip"
              02get_composer:
                cwd: /tmp
                env:
                  COMPOSER_HOME: /composer
                  COMPOSER_ALLOW_SUPERUSER: 1
                  PATH: /usr/bin:/usr/local/bin:/sbin:$PATH
                command: "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
              03putsite_content: 
                cwd: /tmp
                command: "unzip -qo /tmp/pww_site.zip -d /var/www/ && chmod -R 755 /var/www/*"
              04install_frameworks:
                cwd: /var/www/
                env:
                  COMPOSER_HOME: /composer
                  COMPOSER_ALLOW_SUPERUSER: 1
                  PATH: /usr/bin:/usr/local/bin:/sbin:$PATH
                command: "cd /var/www/; php /usr/local/bin/composer install; bower install --allow-root; systemctl enable httpd; systemctl start httpd"

  AutoScalingGroup:
    DependsOn: Alb
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref sub1Private
      - !Ref sub2Private
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - !Ref AlbTargetGroup
      DesiredCapacity: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 240
      Tags:
       -
        Key: Name
        Value: !Join ["-" , [!Ref 'AWS::StackName', node]]
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

## Deploy a WAF WebACL, Sample Rule, Sample IPSet
  wafBlacklistIpSetV4:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Description: SampleIPSetV4
      Name: SampleIPSetV4
      Scope: REGIONAL
      IPAddressVersion: IPV4
      Addresses:
        - 127.0.0.0/8
  wafBlacklistIpSetV6:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Description: SampleIPSetV6
      Name: SampleIPSetV6
      Scope: REGIONAL
      IPAddressVersion: IPV6
      Addresses:
        - ::1/128
  wafACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: NitinAB3WAF
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: ExampleWebACLMetric
      Rules:
        - Name: WafIpBlacklist
          Priority: 0
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BlockIPMetric
          Statement:
            OrStatement:
              Statements:
              - IPSetReferenceStatement: 
                  Arn: !GetAtt wafBlacklistIpSetV4.Arn
              - IPSetReferenceStatement:
                  Arn: !GetAtt wafBlacklistIpSetV6.Arn

## Associate WAF ACL with load balancer
  wafALBAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        !Sub 
          - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/${TargetALB}'
          - TargetALB: !GetAtt Alb.LoadBalancerFullName
      WebACLArn: !GetAtt wafACL.Arn

##  Configure the EC2 IAM role along with supporting resources
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-" , [!Ref 'AWS::StackName', EC2Role]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [ "waf-regional:GetSampledRequests", "cloudwatch:GetMetricStatistics" ]
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
              -
                Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactsBucket']]
              -
                Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactsBucket', /, !Ref 'ArtifactsPrefix', /*]]

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: EC2InstanceRole

  AMILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"

# AMIInfoFunction - Look up an AMI based on a NameFilter
#
# This AWS Lambda function is used to look up an Amazon EC2 AMI based
# on a name filter. An example of a name filter would be:
#
# amzn2-ami-hvm\*ebs
#
# After looking up the names of all images that satify the filter,
# they are sorted in reverse by date/time stamp and the first AMI
# ID (which corresponds to the newest AMI) is returned.
#
# Using a Lambda function makes it possible to look up the AMI
# dynamically.  THe alternative would be to create a static map.

  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: "Look up an AMI based on a filter"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt AMILambdaExecutionRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import cfnresponse
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              responseData = {}      
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            
            ec2=boto3.client('ec2')
            imageDescriptions=ec2.describe_images(
              Owners=['amazon'],
              Filters=[
                {'Name': 'name', 'Values': [event['ResourceProperties']['NameFilter']]}, 
                {'Name': 'architecture', 'Values': ['x86_64']}
              ],
            )
            
            numImageDescriptions = len(imageDescriptions['Images'])
            if numImageDescriptions < 2:
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
            else:
              amiNames = sorted(imageDescriptions['Images'],
                key=lambda x: x['CreationDate'],
                reverse=True)
              responseData = {}
              responseData['Id'] = amiNames[${AMIPreviousVersionIndex}]['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            return

# AMIInfo - The AWS Lambda-backed resource for looking up an Amazon EC2 AMI
#
# Parameters
#
# ServiceToken - a pointer to the AWS Lambda function
# NameFilter - the name filter to pass to the describe_images API

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      NameFilter: 'amzn2-ami-hvm*gp2'

# End of changes

Outputs:
  cfnVersion:
    Value: 4
  accountId:
    Description: AWS account number
    Value: !Ref AWS::AccountId
  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
  albEndpoint:
    Description: Test website
    Value: !Join ['', ['http://', !GetAtt Alb.DNSName]]
  wafWebACL:
    Description: WAF Web ACL associated with test website
    Value: !Ref wafACL